[
  {
    "command": "assert",
    "description": "returns ✅ if the <b>input</b> expression evaluates to <b>true</b>, otherwise ❌.",
    "grammar": {
      "input": "input",
      "command": "assert",
      "params": "",
      "output": "✅ or ❌"
    },
    "examples": [
      {
        "expression": "// 2 == 2 | assert",
        "result": "✅"
      },
      {
        "expression": "// 0 | assert",
        "result": "❌"
      },
      {
        "expression": "// 15 | above 10 | assert",
        "result": "✅"
      }
    ]
  },
  {
    "command": "is",
    "description": "checks whether <b>input</b> is equal or not to <b>value</b>.",
    "grammar": {
      "input": "input",
      "command": "is",
      "params": "value",
      "output": "true or false"
    },
    "examples": [
      {
        "expression": "// 1 | is 1",
        "result": "true"
      },
      {
        "expression": "// 0 | is 1",
        "result": "false"
      },
      {
        "expression": "// \"string\" | is \"string\"",
        "result": "\"string\""
      }
    ]
  },
  {
    "command": "above",
    "description": "returns the <b>input</b> number only if > the <b>threshold</b>.",
    "grammar": {
      "input": "input",
      "command": "above",
      "params": "threshold",
      "output": "input or None"
    },
    "examples": [
      {
        "expression": "// 10 | above 5",
        "result": "10"
      },
      {
        "expression": "// 10 | above 20",
        "result": "None"
      }
    ]
  },
  {
    "command": "below",
    "description": "returns the <b>input</b> number only if < the <b>threshold</b>.",
    "grammar": {
      "input": "input",
      "command": "below",
      "params": "threshold",
      "output": "input or None"
    },
    "examples": [
      {
        "expression": "// 10 | below 5",
        "result": "None"
      },
      {
        "expression": "// 10 | below 20",
        "result": "20"
      }
    ]
  },
  {
    "command": "between",
    "description": "returns the <b>input</b> number only if <b>low</b> <= input <= <b>up</b>.",
    "grammar": {
      "input": "input",
      "command": "between",
      "params": "low, up",
      "output": "input or None"
    },
    "examples": [
      {
        "expression": "// 10 | between 5, 10",
        "result": "10"
      },
      {
        "expression": "// 10 | between 20, 30",
        "result": "None"
      }
    ]
  },
  {
    "command": "lpfilter",
    "description": "returns the <b>input</b> after applying a low-pass filter. The optional parameter is a number between 1 (no filtering) and 0 excluded (infite filter).",
    "grammar": {
      "input": "input",
      "command": "lpfilter",
      "params": "optional_param",
      "output": "filtered input"
    },
    "examples": [
      {
        "expression": "// 10 | lpfilter",
        "result": "10"
      },
      {
        "expression": "// 10 | lpfilter 0.3",
        "result": "10"
      }
    ]
  },
  {
    "command": "graph",
    "description": "draw a line graph based on the <b>input</b> number and optional additional numerical values. Other commands <b>cannot</b> be chained after this output command.",
    "grammar": {
      "input": "input",
      "command": "graph",
      "params": "list values",
      "output": "[draw linegraph]"
    },
    "examples": [
      {
        "expression": "// $$ | graph",
        "result": "[line graph]"
      },
      {
        "expression": "// 10 | graph 0, 100",
        "result": "[line graph]"
      }
    ]
  },
  {
    "command": "hist",
    "description": "draw a histogram based on the <b>input</b> number and optional additional numerical values. Other commands <b>cannot</b> be chained after this output command.",
    "grammar": {
      "input": "input",
      "command": "hist",
      "params": "list values",
      "output": "[draw linegraph]"
    },
    "examples": [
      {
        "expression": "// $$ | hist",
        "result": "[histogram]"
      },
      {
        "expression": "// 10 | hist 0, 100",
        "result": "[histogram]"
      }
    ]
  },
  {
    "command": "print",
    "description": "print on the line the <b>input</b> and optional additional values. Other commands <b>cannot</b> be chained after this output command.",
    "grammar": {
      "input": "input",
      "command": "print",
      "params": "list values",
      "output": "input, list values"
    },
    "examples": [
      {
        "expression": "// 1 | print",
        "result": "1"
      },
      {
        "expression": "// $$ | print 0, 100",
        "result": "$$, 0, 100"
      }
    ]
  },
  {
    "command": "save",
    "description": "save the <b>input</b> value in a <b>variable</b>.<br/>Recall the variable using the <b>$</b> operator before the variable name.",
    "grammar": {
      "input": "input",
      "command": "save",
      "params": "variable name",
      "output": "input"
    },
    "examples": [
      {
        "expression": "// 1 | save x",
        "result": "1"
      },
      {
        "expression": "// $x",
        "result": "1"
      }
    ]
  },
  {
    "command": "count",
    "description": "increment a counter if <b>input</b> is defined, and store it in a <b>variable</b>.<br/>Recall the variable using the <b>$</b> operator before the variable name.",
    "grammar": {
      "input": "input",
      "command": "count",
      "params": "variable name",
      "output": "counter"
    },
    "examples": [
      {
        "expression": "// count x",
        "result": "1...2...3..."
      }
    ]
  },
  {
    "command": "add",
    "description": "accumulate <b>input</b> if defined in a <b>variable</b>.<br/>Recall the variable using the <b>$</b> operator before the variable name.",
    "grammar": {
      "input": "input",
      "command": "add",
      "params": "variable name",
      "output": "add"
    },
    "examples": [
      {
        "expression": "// count x",
        "result": "[x+= input]"
      }
    ]
  },
  {
    "command": "log",
    "description": "log the <b>input</b> value to a file (specify name or default is <b>logs.txt</b>). Other commands <b>can</b> be chained to this one.",
    "grammar": {
      "input": "input",
      "command": "log",
      "params": "optional fileName",
      "output": "input"
    },
    "examples": [
      {
        "expression": "// $$ | log",
        "result": "$$"
      },
      {
        "expression": "// $$ | log file.txt",
        "result": "$$ (in file.txt)"
      }
    ]
  },
  {
    "command": "volt",
    "description": "Show the analog input in Volt. Other commands <b>cannot</b> be chained to this one.",
    "grammar": {
      "input": "input",
      "command": "volt",
      "params": "optional reference voltage",
      "output": "convertion to Volt"
    },
    "examples": [
      {
        "expression": "// 1024 | volt",
        "result": "5"
      },
      {
        "expression": "// 1024 | volt 3",
        "result": "3"
      }
    ]
  },
  {
    "command": "map",
    "description": "takes an input and map it with a function to an output.",
    "grammar": {
      "input": "input",
      "command": "map",
      "params": "function x => x'",
      "output": "mapped input x'"
    },
    "examples": [
      {
        "expression": "// $$ | map x => x*2",
        "result": "$$*2"
      }
    ]
  },
  {
    "command": "filter",
    "description": "takes an input and return is the filter function returns true",
    "grammar": {
      "input": "input",
      "command": "filter",
      "params": "function x => true",
      "output": "input or undefined"
    },
    "examples": [
      {
        "expression": "// 12 | filter x => x%2==0",
        "result": "12"
      },
      {
        "expression": "// 13 | filter x => x % 2 == 0",
        "result": "None"
      }
    ]
  },
  {
    "command": "$$",
    "description": "is the defaul input at a line. It is equivalent to $0. If multiple values are on the same line, use $1, $2, ... to retrieve those. ",
    "grammar": {
      "input": "",
      "command": "$$",
      "params": "",
      "output": "$$ (current value)"
    },
    "examples": [
      {
        "expression": "// $$",
        "result": "$$ (current value)"
      },
      {
        "expression": "// $0",
        "result": "$$"
      },
      {
        "expression": "// print $1",
        "result": "$$, $1"
      }
    ]
  },
  {
    "command": "$x",
    "description": "The variable x.",
    "grammar": {
      "input": "",
      "command": "$x",
      "params": "",
      "output": "$x (value of x)"
    },
    "examples": [
      {
        "expression": "// $x",
        "result": "[some value]"
      }
    ]
  },
  {
    "command": "$0",
    "description": "The positional value in the line. In case of multiple expressions you can refer to each value of $$ as $0, $1, $2...",
    "grammar": {
      "input": "",
      "command": "$0",
      "params": "",
      "output": "$0 (same as $$)"
    },
    "examples": [
      {
        "expression": "// $0",
        "result": "same as $$"
      }
    ]
  }
]
